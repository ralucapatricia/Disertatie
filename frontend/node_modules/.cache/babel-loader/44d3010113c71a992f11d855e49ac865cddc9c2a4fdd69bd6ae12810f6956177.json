{"ast":null,"code":"//un get request to sign up \n\nexport const getTokenAsync = async getAccessToken => {\n  try {\n    const token = await getAccessToken();\n    return token;\n  } catch (err) {\n    throw new Error('Failed to get access token');\n  }\n};\nexport const getToken = async token => {\n  try {\n    const response = await fetch('https://localhost:7200/api/GetToken', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || 'An error occurred while fetching the token.');\n    }\n    const emailResponse = await response.text();\n    return emailResponse;\n  } catch (error) {\n    throw new Error('An unexpected error occurred.');\n  }\n};\nexport const fetchUserId = async (email, token, URL) => {\n  const url = `${URL}/Users/email_${email}`;\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user ID');\n    }\n    const json = await response.json();\n    return {\n      userId: json.user_id,\n      teamId: json.team_id,\n      isTeamLeader: json.is_team_leader\n    };\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\nexport const fetchUserName = async (id, token, URL) => {\n  const url = `${URL}/Users/id_${id}`;\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user ID');\n    }\n    const json = await response.json();\n    return {\n      userName: json.name\n    };\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\nexport const PutDailyTime = async (userId, token, inputValue) => {\n  const formattedTime = inputValue.trim();\n  const timeData = {\n    daily_time: formattedTime\n  };\n  console.log(formattedTime);\n  console.log('Time data being sent: ', JSON.stringify(timeData));\n  try {\n    const response = await fetch(`https://localhost:7200/api/Teams/${userId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(timeData)\n    });\n    if (response.ok) {\n      await response.json();\n      console.log(response);\n      return 'Echipa a fost actualizată cu succes!';\n    } else if (response.status === 204) {\n      return 'Nu s-a găsit echipa.';\n    } else {\n      const errorMessage = await response.text();\n      return `A apărut o eroare: ${errorMessage}`;\n    }\n  } catch (error) {\n    console.error('Error updating team:', error);\n    return 'A apărut o eroare la actualizarea echipei.';\n  }\n};\n_c = PutDailyTime;\nexport const PostJoke = async (joke, userId, teamId, token) => {\n  const currentDate = new Date().toISOString();\n  const jokeData = {\n    content: joke,\n    author_id: userId,\n    team_id: teamId,\n    post_date: currentDate\n  };\n  try {\n    const response = await fetch(`https://localhost:7200/api/Jokes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(jokeData)\n    });\n    if (response.ok) {\n      await response.json();\n      return 'The joke was successfully added.';\n    } else if (response.status === 404) {\n      return 'No team found';\n    } else {\n      const errorMessage = await response.text();\n      return `An error has occurred. ${errorMessage}`;\n    }\n  } catch (error) {\n    console.error('Error adding joke:', error);\n    return 'An error has occurred while entering the joke. ';\n  }\n};\n_c2 = PostJoke;\nexport const getJokes = async (token, teamId) => {\n  try {\n    const response = await fetch(`https://localhost:7200/api/Jokes/${teamId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || 'An error occurred while fetching the jokes.');\n    }\n    const jokeResponse = await response.json();\n    return jokeResponse;\n  } catch (error) {\n    throw new Error('An unexpected error occurred');\n  }\n};\nexport const getJokesWithAuthors = async (token, teamId, URL) => {\n  try {\n    const jokes = await getJokes(token, teamId);\n    const jokesWithAuthors = await Promise.all(jokes.map(async joke => {\n      const {\n        userName\n      } = await fetchUserName(joke.author_id, token, URL);\n      return {\n        content: joke.content,\n        postDate: joke.post_date,\n        authorName: userName,\n        authorId: joke.author_id\n      };\n    }));\n    return jokesWithAuthors;\n  } catch (error) {\n    throw new Error('An error occurred while fetching jokes with authors');\n  }\n};\nexport const makeAuthorizedRequest = async token => {\n  const apiEndpoint = 'https://localhost:7200/api/UpdateDatabase';\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.error('Error making request:', error);\n    throw new Error('A apărut o eroare la actualizarea bazei de date.');\n  }\n};\nexport const getDailyTime = async (teamId, token) => {\n  try {\n    const response = await fetch(`https://localhost:7200/api/Teams/${teamId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || 'An error occurred while fetching the token.');\n    }\n    const emailResponse = await response.text();\n    return emailResponse;\n  } catch (error) {\n    throw new Error('An unexpected error occurred.');\n  }\n};\nexport const fetchAuthorId = async (teamId, token, URL) => {\n  const url = `${URL}/Users/turn_${teamId}`;\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user ID');\n    }\n    const json = await response.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\nexport const GetUserIdByTeamId = async (teamId, token) => {\n  try {\n    const response = await fetch(`https://localhost:7200/api/Users/${teamId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || 'An error occurred while fetching the token.');\n    }\n    const responseAPi = await response.text();\n    return responseAPi;\n  } catch (error) {\n    throw new Error('An unexpected error occurred.');\n  }\n};\n\n//disertatie\n//sign-up \n_c3 = GetUserIdByTeamId;\nexport const SignUpUser = async (userEmail, password, token) => {\n  const userData = {\n    UserEmail: userEmail,\n    PasswordHash: password\n  };\n  try {\n    const response = await fetch(`https://localhost:5001/api/sign-up`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(userData)\n    });\n    if (response.ok) {\n      const createdUser = await response.json();\n      return `User successfully created. User email: ${createdUser.UserEmail}`;\n    } else if (response.status === 400) {\n      const errorMessage = await response.text();\n      return `Error: ${errorMessage}`;\n    } else {\n      const errorMessage = await response.text();\n      return `An unexpected error has occurred. ${errorMessage}`;\n    }\n  } catch (error) {\n    console.error('Error signing up user:', error);\n    return 'An error has occurred while signing up the user.';\n  }\n};\n_c4 = SignUpUser;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"PutDailyTime\");\n$RefreshReg$(_c2, \"PostJoke\");\n$RefreshReg$(_c3, \"GetUserIdByTeamId\");\n$RefreshReg$(_c4, \"SignUpUser\");","map":{"version":3,"names":["getTokenAsync","getAccessToken","token","err","Error","getToken","response","fetch","method","headers","Authorization","ok","errorMessage","text","emailResponse","error","fetchUserId","email","URL","url","json","userId","user_id","teamId","team_id","isTeamLeader","is_team_leader","message","fetchUserName","id","userName","name","PutDailyTime","inputValue","formattedTime","trim","timeData","daily_time","console","log","JSON","stringify","body","status","_c","PostJoke","joke","currentDate","Date","toISOString","jokeData","content","author_id","post_date","_c2","getJokes","jokeResponse","getJokesWithAuthors","jokes","jokesWithAuthors","Promise","all","map","postDate","authorName","authorId","makeAuthorizedRequest","apiEndpoint","getDailyTime","fetchAuthorId","GetUserIdByTeamId","responseAPi","_c3","SignUpUser","userEmail","password","userData","UserEmail","PasswordHash","createdUser","_c4","$RefreshReg$"],"sources":["C:/Users/Raluca.Sodinca/Disertatie2/frontend/src/services/api.ts"],"sourcesContent":["//un get request to sign up \r\n\r\n\r\n\r\n\r\nexport const getTokenAsync = async (getAccessToken: () => Promise<string>) => {\r\n    try {\r\n        const token = await getAccessToken();\r\n        return token;\r\n    } catch (err) {\r\n        throw new Error('Failed to get access token');\r\n    }\r\n};\r\nexport const getToken = async (token: string) => {\r\n    try {\r\n        const response = await fetch('https://localhost:7200/api/GetToken', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await response.text();\r\n            throw new Error(errorMessage || 'An error occurred while fetching the token.');\r\n        }\r\n\r\n        const emailResponse = await response.text();\r\n        return emailResponse;\r\n    } catch (error) {\r\n        throw new Error('An unexpected error occurred.');\r\n    }\r\n};\r\n\r\nexport const fetchUserId = async (email: string, token: string, URL: string) => {\r\n    const url = `${URL}/Users/email_${email}`;\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch user ID');\r\n        }\r\n\r\n        const json = await response.json();\r\n        return {\r\n            userId: json.user_id,\r\n            teamId: json.team_id,\r\n            isTeamLeader: json.is_team_leader,\r\n        };\r\n    } catch (err) {\r\n        throw new Error((err as Error).message);\r\n    }\r\n};\r\n\r\nexport const fetchUserName = async (id: number, token: string, URL: string) => {\r\n    const url = `${URL}/Users/id_${id}`;\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch user ID');\r\n        }\r\n\r\n        const json = await response.json();\r\n        return {\r\n            userName: json.name,\r\n        };\r\n    } catch (err) {\r\n        throw new Error((err as Error).message);\r\n    }\r\n};\r\n\r\nexport const PutDailyTime = async (\r\n    userId: string | null,\r\n    token: string,\r\n    inputValue: string,\r\n): Promise<string> => {\r\n    const formattedTime = inputValue.trim();\r\n    const timeData = { daily_time: formattedTime };\r\n    console.log(formattedTime);\r\n    console.log('Time data being sent: ', JSON.stringify(timeData));\r\n    try {\r\n        const response = await fetch(`https://localhost:7200/api/Teams/${userId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(timeData),\r\n        });\r\n\r\n        if (response.ok) {\r\n            await response.json();\r\n            console.log(response);\r\n            return 'Echipa a fost actualizată cu succes!';\r\n        } else if (response.status === 204) {\r\n            return 'Nu s-a găsit echipa.';\r\n        } else {\r\n            const errorMessage = await response.text();\r\n            return `A apărut o eroare: ${errorMessage}`;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error updating team:', error);\r\n        return 'A apărut o eroare la actualizarea echipei.';\r\n    }\r\n};\r\n\r\nexport const PostJoke = async (\r\n    joke: string,\r\n    userId: string | null,\r\n    teamId: string | null,\r\n    token: string,\r\n): Promise<string> => {\r\n    const currentDate = new Date().toISOString();\r\n    const jokeData = {\r\n        content: joke,\r\n        author_id: userId,\r\n        team_id: teamId,\r\n        post_date: currentDate,\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(`https://localhost:7200/api/Jokes`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(jokeData),\r\n        });\r\n\r\n        if (response.ok) {\r\n            await response.json();\r\n            return 'The joke was successfully added.';\r\n        } else if (response.status === 404) {\r\n            return 'No team found';\r\n        } else {\r\n            const errorMessage = await response.text();\r\n            return `An error has occurred. ${errorMessage}`;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error adding joke:', error);\r\n        return 'An error has occurred while entering the joke. ';\r\n    }\r\n};\r\n\r\nexport interface Joke {\r\n    joke_id: number;\r\n    author_id: number;\r\n    user: any;\r\n    team_id: number;\r\n    team: any;\r\n    content: string;\r\n    post_date: string;\r\n}\r\n\r\nexport const getJokes = async (token: string, teamId: string): Promise<Joke[]> => {\r\n    try {\r\n        const response = await fetch(`https://localhost:7200/api/Jokes/${teamId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await response.text();\r\n            throw new Error(errorMessage || 'An error occurred while fetching the jokes.');\r\n        }\r\n\r\n        const jokeResponse: Joke[] = await response.json();\r\n        return jokeResponse;\r\n    } catch (error) {\r\n        throw new Error('An unexpected error occurred');\r\n    }\r\n};\r\n\r\nexport interface JokeWithAuthor {\r\n    content: string;\r\n    postDate: string;\r\n    authorName: string;\r\n    authorId: number;\r\n}\r\n\r\nexport const getJokesWithAuthors = async (\r\n    token: string,\r\n    teamId: string,\r\n    URL: string,\r\n): Promise<JokeWithAuthor[]> => {\r\n    try {\r\n        const jokes: Joke[] = await getJokes(token, teamId);\r\n\r\n        const jokesWithAuthors: JokeWithAuthor[] = await Promise.all(\r\n            jokes.map(async (joke) => {\r\n                const { userName } = await fetchUserName(joke.author_id, token, URL);\r\n                return {\r\n                    content: joke.content,\r\n                    postDate: joke.post_date,\r\n                    authorName: userName,\r\n                    authorId: joke.author_id,\r\n                };\r\n            }),\r\n        );\r\n\r\n        return jokesWithAuthors;\r\n    } catch (error) {\r\n        throw new Error('An error occurred while fetching jokes with authors');\r\n    }\r\n};\r\n\r\nexport const makeAuthorizedRequest = async (token: string) => {\r\n    const apiEndpoint = 'https://localhost:7200/api/UpdateDatabase';\r\n\r\n    try {\r\n        const response = await fetch(apiEndpoint, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Error making request:', error);\r\n        throw new Error('A apărut o eroare la actualizarea bazei de date.');\r\n    }\r\n};\r\n\r\nexport const getDailyTime = async (teamId: string | null, token: string) => {\r\n    try {\r\n        const response = await fetch(`https://localhost:7200/api/Teams/${teamId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await response.text();\r\n            throw new Error(errorMessage || 'An error occurred while fetching the token.');\r\n        }\r\n\r\n        const emailResponse = await response.text();\r\n        return emailResponse;\r\n    } catch (error) {\r\n        throw new Error('An unexpected error occurred.');\r\n    }\r\n};\r\n\r\nexport const fetchAuthorId = async (teamId: string | null, token: string, URL: string) => {\r\n    const url = `${URL}/Users/turn_${teamId}`;\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch user ID');\r\n        }\r\n\r\n        const json = await response.json();\r\n        console.log(json);\r\n        return json;\r\n    } catch (err) {\r\n        throw new Error((err as Error).message);\r\n    }\r\n};\r\n\r\nexport const GetUserIdByTeamId = async (teamId: string | null, token: string) => {\r\n    try {\r\n        const response = await fetch(`https://localhost:7200/api/Users/${teamId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await response.text();\r\n            throw new Error(errorMessage || 'An error occurred while fetching the token.');\r\n        }\r\n\r\n        const responseAPi = await response.text();\r\n        return responseAPi;\r\n    } catch (error) {\r\n        throw new Error('An unexpected error occurred.');\r\n    }\r\n};\r\n\r\n//disertatie\r\n//sign-up \r\nexport const SignUpUser = async (\r\n    userEmail: string,\r\n    password: string,\r\n    token: string,\r\n): Promise<string> => {\r\n    const userData = {\r\n        UserEmail: userEmail,\r\n        PasswordHash: password,\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(`https://localhost:5001/api/sign-up`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n\r\n        if (response.ok) {\r\n            const createdUser = await response.json();\r\n            return `User successfully created. User email: ${createdUser.UserEmail}`;\r\n        } else if (response.status === 400) {\r\n            const errorMessage = await response.text();\r\n            return `Error: ${errorMessage}`;\r\n        } else {\r\n            const errorMessage = await response.text();\r\n            return `An unexpected error has occurred. ${errorMessage}`;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error signing up user:', error);\r\n        return 'An error has occurred while signing up the user.';\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}