namespace API.Utils.HttpReturns
{
    public static class HttpStatusCodeExtensions
    {
        public static string GetDescription(this HttpStatusCode statusCode)
        {
            return statusCode switch
            {
                HttpStatusCode.Continue => "Continue: ",
                HttpStatusCode.SwitchingProtocols => "Switching Protocols: ",
                HttpStatusCode.Processing => "Processing: ",
                HttpStatusCode.OK => "OK: ",
                HttpStatusCode.Created => "Created: ",
                HttpStatusCode.Accepted => "Accepted: ",
                HttpStatusCode.NonAuthoritativeInformation => "Non-Authoritative Information: ",
                HttpStatusCode.NoContent => "No Content: ",
                HttpStatusCode.ResetContent => "Reset Content: ",
                HttpStatusCode.PartialContent => "Partial Content: ",
                HttpStatusCode.MultiStatus => "Multi-Status: ",
                HttpStatusCode.AlreadyReported => "Already Reported: ",
                HttpStatusCode.IMUsed => "IM Used: ",
                HttpStatusCode.MultipleChoices => "Multiple Choices: ",
                HttpStatusCode.MovedPermanently => "Moved Permanently: ",
                HttpStatusCode.Found => "Found: ",
                HttpStatusCode.SeeOther => "See Other: ",
                HttpStatusCode.NotModified => "Not Modified: ",
                HttpStatusCode.UseProxy => "Use Proxy: ",
                HttpStatusCode.TemporaryRedirect => "Temporary Redirect: ",
                HttpStatusCode.PermanentRedirect => "Permanent Redirect: ",
                HttpStatusCode.BadRequest => "Bad Request: ",
                HttpStatusCode.Unauthorized => "Unauthorized: ",
                HttpStatusCode.PaymentRequired => "Payment Required: ",
                HttpStatusCode.Forbidden => "Forbidden: ",
                HttpStatusCode.NotFound => "Not Found: ",
                HttpStatusCode.MethodNotAllowed => "Method Not Allowed: ",
                HttpStatusCode.NotAcceptable => "Not Acceptable: ",
                HttpStatusCode.ProxyAuthenticationRequired => "Proxy Authentication Required: ",
                HttpStatusCode.RequestTimeout => "Request Timeout: ",
                HttpStatusCode.Conflict => "Conflict: ",
                HttpStatusCode.Gone => "Gone: ",
                HttpStatusCode.LengthRequired => "Length Required: ",
                HttpStatusCode.PreconditionFailed => "Precondition Failed: ",
                HttpStatusCode.PayloadTooLarge => "Payload Too Large: ",
                HttpStatusCode.URITooLong => "URI Too Long: ",
                HttpStatusCode.UnsupportedMediaType => "Unsupported Media Type: ",
                HttpStatusCode.RangeNotSatisfiable => "Range Not Satisfiable: ",
                HttpStatusCode.ExpectationFailed => "Expectation Failed: ",
                HttpStatusCode.IMATeapot => "I'm a teapot: ",
                HttpStatusCode.MisdirectedRequest => "Misdirected Request: ",
                HttpStatusCode.UnprocessableEntity => "Unprocessable Entity: ",
                HttpStatusCode.Locked => "Locked: ",
                HttpStatusCode.FailedDependency => "Failed Dependency: ",
                HttpStatusCode.TooEarly => "Too Early: ",
                HttpStatusCode.UpgradeRequired => "Upgrade Required: ",
                HttpStatusCode.PreconditionRequired => "Precondition Required: ",
                HttpStatusCode.TooManyRequests => "Too Many Requests: ",
                HttpStatusCode.RequestHeaderFieldsTooLarge => "Request Header Fields Too Large: ",
                HttpStatusCode.UnavailableForLegalReasons => "Unavailable For Legal Reasons: ",
                HttpStatusCode.InternalServerError => "Internal Server Error: ",
                HttpStatusCode.NotImplemented => "Not Implemented: ",
                HttpStatusCode.BadGateway => "Bad Gateway: ",
                HttpStatusCode.ServiceUnavailable => "Service Unavailable: ",
                HttpStatusCode.GatewayTimeout => "Gateway Timeout: ",
                HttpStatusCode.HTTPVersionNotSupported => "HTTP Version Not Supported: ",
                HttpStatusCode.VariantAlsoNegotiates => "Variant Also Negotiates: ",
                HttpStatusCode.InsufficientStorage => "Insufficient Storage: ",
                HttpStatusCode.LoopDetected => "Loop Detected: ",
                HttpStatusCode.NotExtended => "Not Extended: ",
                HttpStatusCode.NetworkAuthenticationRequired => "Network Authentication Required: ",
                _ => "Unknown Status Code: "
            };
        }
    }
}
